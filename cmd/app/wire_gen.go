// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-sphere/sphere-layout/internal/biz/task/conncleaner"
	"github.com/go-sphere/sphere-layout/internal/biz/task/dashinit"
	"github.com/go-sphere/sphere-layout/internal/config"
	"github.com/go-sphere/sphere-layout/internal/pkg/dao"
	"github.com/go-sphere/sphere-layout/internal/pkg/database/client"
	api2 "github.com/go-sphere/sphere-layout/internal/server/api"
	bot2 "github.com/go-sphere/sphere-layout/internal/server/bot"
	dash2 "github.com/go-sphere/sphere-layout/internal/server/dash"
	"github.com/go-sphere/sphere-layout/internal/service/api"
	"github.com/go-sphere/sphere-layout/internal/service/bot"
	"github.com/go-sphere/sphere-layout/internal/service/dash"
	"github.com/go-sphere/sphere/cache/memory"
	"github.com/go-sphere/sphere/core/boot"
	"github.com/go-sphere/sphere/server/service/file"
	"github.com/go-sphere/sphere/social/wechat"
)

// Injectors from wire.go:

func NewApplication(conf *config.Config) (*boot.Application, error) {
	dashConfig := conf.Dash
	localConfig := conf.Storage
	s3Adapter, err := file.NewLocalFileService(localConfig)
	if err != nil {
		return nil, err
	}
	clientConfig := conf.Database
	entClient, err := client.NewDataBaseClient(clientConfig)
	if err != nil {
		return nil, err
	}
	daoDao := dao.NewDao(entClient)
	wechatConfig := conf.WxMini
	wechatWechat := wechat.NewWechat(wechatConfig)
	cache := memory.NewByteCache()
	service := dash.NewService(daoDao, wechatWechat, cache, s3Adapter)
	web := dash2.NewWebServer(dashConfig, s3Adapter, service)
	apiConfig := conf.API
	apiService := api.NewService(daoDao, wechatWechat, cache, s3Adapter)
	apiWeb := api2.NewWebServer(apiConfig, s3Adapter, apiService)
	telegramConfig := conf.Bot
	botService := bot.NewService()
	botBot, err := bot2.NewApp(telegramConfig, botService)
	if err != nil {
		return nil, err
	}
	fileConfig := conf.File
	fileWeb := file.NewWebServer(fileConfig, s3Adapter)
	dashInitialize := dashinit.NewDashInitialize(daoDao)
	connectCleaner := conncleaner.NewConnectCleaner(daoDao, cache)
	application := newApplication(web, apiWeb, botBot, fileWeb, dashInitialize, connectCleaner)
	return application, nil
}
